# Generated by Django 4.2.18 on 2025-04-29 12:12

from django.db import migrations

def migrate_integration_data(apps, schema_editor):
    # Get the old and new models
    OldThread = apps.get_model('core', 'Thread')
    OldWidgetId = apps.get_model('core', 'WidgetId')
    OldIntegration = apps.get_model('core', 'Integration')
    
    NewThread = apps.get_model('integrations', 'Thread')
    NewWidgetId = apps.get_model('integrations', 'WidgetId')
    NewIntegration = apps.get_model('integrations', 'Integration')
    
    # First migrate Integration data
    integration_map = {}  # Map old integration IDs to new integration objects
    for old_integration in OldIntegration.objects.all():
        new_integration = NewIntegration.objects.create(
            type=old_integration.type,
            workspace_name=old_integration.workspace_name,
            external_id=old_integration.external_id,
            guru_type=old_integration.guru_type,
            code=old_integration.code,
            api_key=old_integration.api_key,
            access_token=old_integration.access_token,
            refresh_token=old_integration.refresh_token,
            channels=old_integration.channels,
            github_private_key=old_integration.github_private_key,
            github_client_id=old_integration.github_client_id,
            github_secret=old_integration.github_secret,
            github_bot_name=old_integration.github_bot_name,
            github_html_url=old_integration.github_html_url,
            jira_api_key=old_integration.jira_api_key,
            jira_user_email=old_integration.jira_user_email,
            jira_domain=old_integration.jira_domain,
            confluence_api_token=old_integration.confluence_api_token,
            confluence_user_email=old_integration.confluence_user_email,
            confluence_domain=old_integration.confluence_domain,
            zendesk_domain=old_integration.zendesk_domain,
            zendesk_api_token=old_integration.zendesk_api_token,
            zendesk_user_email=old_integration.zendesk_user_email,
            date_created=old_integration.date_created,
            date_updated=old_integration.date_updated
        )
        integration_map[old_integration.id] = new_integration
    
    # Then migrate Thread data using the integration map
    for old_thread in OldThread.objects.all():
        NewThread.objects.create(
            thread_id=old_thread.thread_id,
            binge=old_thread.binge,
            integration=integration_map[old_thread.integration_id],
            date_created=old_thread.date_created,
            date_updated=old_thread.date_updated
        )
    
    # Finally migrate WidgetId data
    for old_widget in OldWidgetId.objects.all():
        NewWidgetId.objects.create(
            guru_type=old_widget.guru_type,
            key=old_widget.key,
            domain_url=old_widget.domain_url,
            domain=old_widget.domain,
            is_wildcard=old_widget.is_wildcard,
            date_created=old_widget.date_created,
            date_updated=old_widget.date_updated
        )

def reverse_migrate_integration_data(apps, schema_editor):
    # Get the new models
    NewThread = apps.get_model('integrations', 'Thread')
    NewWidgetId = apps.get_model('integrations', 'WidgetId')
    NewIntegration = apps.get_model('integrations', 'Integration')
    
    # Delete all data from new models
    NewThread.objects.all().delete()
    NewWidgetId.objects.all().delete()
    NewIntegration.objects.all().delete()

class Migration(migrations.Migration):
    dependencies = [
        ('core', '0089_alter_gurutype_language'),
        ('integrations', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_integration_data, reverse_migrate_integration_data),
        migrations.DeleteModel(
            name='Integration',
        ),
        migrations.DeleteModel(
            name='Thread',
        ),
        migrations.DeleteModel(
            name='WidgetId',
        ),
    ]

# Generated by Django 4.2.13 on 2024-12-17 22:50

import core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Binge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('last_used', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('PDF', 'PDF'), ('WEBSITE', 'WEBSITE'), ('YOUTUBE', 'YOUTUBE')], default='PDF', max_length=50)),
                ('url', models.URLField(blank=True, max_length=2000, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('file', models.FileField(blank=True, null=True, upload_to=core.models.get_datasource_upload_path)),
                ('content', models.TextField(blank=True, null=True)),
                ('in_milvus', models.BooleanField(default=False)),
                ('doc_ids', models.JSONField(blank=True, default=list, null=True)),
                ('status', models.CharField(choices=[('NOT_PROCESSED', 'NOT_PROCESSED'), ('SUCCESS', 'SUCCESS'), ('FAIL', 'FAIL')], default='NOT_PROCESSED', max_length=50)),
                ('error', models.TextField(blank=True, default='')),
                ('content_rewritten', models.BooleanField(default=False)),
                ('original_content', models.TextField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('initial_summarizations_created', models.BooleanField(default=False)),
                ('final_summarization_created', models.BooleanField(default=False)),
                ('last_reindex_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('reindex_count', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Favicon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(max_length=255, unique=True)),
                ('favicon_url', models.URLField(blank=True, max_length=2000, null=True)),
                ('valid', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='GuruType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('stackoverflow_tag', models.CharField(blank=True, max_length=100, null=True)),
                ('github_repo', models.URLField(blank=True, default='', max_length=2000, null=True)),
                ('github_details', models.JSONField(blank=True, default=dict)),
                ('colors', models.JSONField(blank=True, default=dict)),
                ('icon_url', models.URLField(blank=True, default='', max_length=2000, null=True)),
                ('ogimage_url', models.URLField(blank=True, default='', max_length=2000, null=True)),
                ('ogimage_base_url', models.URLField(blank=True, default='', max_length=2000, null=True)),
                ('stackoverflow_source', models.BooleanField(default=True)),
                ('active', models.BooleanField(default=False)),
                ('intro_text', models.TextField(blank=True, default='', null=True)),
                ('custom', models.BooleanField(default=True)),
                ('milvus_collection_name', models.CharField(blank=True, max_length=100, null=True)),
                ('typesense_collection_name', models.CharField(blank=True, max_length=100, null=True)),
                ('domain_knowledge', models.TextField(blank=True, default='', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('maintainers', models.ManyToManyField(blank=True, related_name='maintained_guru_types', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LinkValidity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.TextField()),
                ('valid', models.BooleanField(default=False)),
                ('response_code', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=1500)),
                ('question', models.TextField()),
                ('old_question', models.TextField(blank=True, default='', null=True)),
                ('user_question', models.TextField(blank=True, default='', null=True)),
                ('og_image_url', models.URLField(blank=True, default='', max_length=2000, null=True)),
                ('content', models.TextField()),
                ('is_helpful', models.BooleanField(blank=True, null=True)),
                ('description', models.TextField()),
                ('change_count', models.IntegerField(default=0)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('add_to_sitemap', models.BooleanField(default=False)),
                ('sitemap_reason', models.TextField(blank=True, default='', null=True)),
                ('sitemap_date', models.DateTimeField(blank=True, null=True)),
                ('description_similarity_percent', models.FloatField(blank=True, null=True)),
                ('title_similarity_percent', models.FloatField(blank=True, null=True)),
                ('content_similarity_percent', models.FloatField(blank=True, null=True)),
                ('saved_similarities', models.JSONField(blank=True, default=dict)),
                ('context_distances', models.JSONField(blank=True, default=list)),
                ('reranked_scores', models.JSONField(blank=True, default=list)),
                ('default_question', models.BooleanField(default=False)),
                ('cost_dollars', models.FloatField(blank=True, default=0, null=True)),
                ('completion_tokens', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('prompt_tokens', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('cached_prompt_tokens', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('latency_sec', models.FloatField(blank=True, default=0, null=True)),
                ('source', models.CharField(choices=[('USER', 'USER'), ('RAW_QUESTION', 'RAW_QUESTION'), ('REDDIT', 'REDDIT'), ('SUMMARY QUESTION', 'SUMMARY QUESTION')], default='USER', max_length=50)),
                ('references', models.JSONField(blank=True, default=dict, null=True)),
                ('prompt', models.TextField(blank=True, default='', null=True)),
                ('english', models.BooleanField(default=True)),
                ('title_processed', models.BooleanField(default=False)),
                ('llm_eval', models.BooleanField(default=False)),
                ('similarity_written_to_milvus', models.BooleanField(default=False)),
                ('follow_up_questions', models.JSONField(blank=True, default=list)),
                ('cache_request_count', models.IntegerField(default=0)),
                ('trust_score', models.FloatField(blank=True, default=0, null=True)),
                ('processed_ctx_relevances', models.JSONField(blank=True, default=dict)),
                ('llm_usages', models.JSONField(blank=True, default=dict)),
                ('binge', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.binge')),
                ('content_most_similar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='content_similar_questions', to='core.question')),
                ('description_most_similar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='description_similar_questions', to='core.question')),
                ('guru_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.gurutype')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_question', to='core.question')),
                ('title_most_similar', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='title_similar_questions', to='core.question')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionValidityCheckPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=1500)),
                ('cost_dollars', models.FloatField(blank=True, default=0, null=True)),
                ('completion_tokens', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('prompt_tokens', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('cached_prompt_tokens', models.PositiveIntegerField(blank=True, default=0, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Settings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rerank_threshold', models.FloatField(default=0.01)),
                ('rerank_threshold_llm_eval', models.FloatField(default=0.01)),
                ('trust_score_threshold', models.FloatField(default=0.0)),
                ('pricings', models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='Summarization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_data_source_summarization', models.BooleanField(default=True)),
                ('content_metadata', models.JSONField(blank=True, default=list, null=True)),
                ('initial', models.BooleanField(default=False)),
                ('source_content', models.TextField(blank=True, null=True)),
                ('split_num', models.IntegerField(default=1)),
                ('result_content', models.TextField(blank=True, null=True)),
                ('is_root', models.BooleanField(default=False)),
                ('processed', models.BooleanField(default=False)),
                ('summary_suitable', models.BooleanField(default=False)),
                ('reasoning', models.TextField(blank=True, default='', null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('model', models.TextField(default='gpt-4o-2024-08-06')),
                ('usages', models.JSONField(blank=True, default=dict, null=True)),
                ('data_source_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.datasource')),
                ('guru_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.gurutype')),
            ],
        ),
        migrations.CreateModel(
            name='SummaryQuestionGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary_sufficient', models.BooleanField(default=False)),
                ('questions', models.JSONField(default=list)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('processed', models.BooleanField(default=False)),
                ('model', models.TextField(default='gpt-4o-2024-08-06')),
                ('usages', models.JSONField(blank=True, default=dict, null=True)),
                ('guru_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.gurutype')),
                ('question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.question')),
                ('summarization_ref', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.summarization')),
            ],
        ),
        migrations.AddField(
            model_name='summarization',
            name='question_generation_ref',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.summaryquestiongeneration'),
        ),
        migrations.AddField(
            model_name='summarization',
            name='summarization_refs',
            field=models.ManyToManyField(blank=True, to='core.summarization'),
        ),
        migrations.CreateModel(
            name='RawQuestionGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort', models.TextField()),
                ('page_num', models.IntegerField()),
                ('page_size', models.IntegerField()),
                ('generate_count', models.IntegerField()),
                ('model', models.TextField()),
                ('cost_dollars', models.FloatField(blank=True, default=0, null=True)),
                ('prompts', models.JSONField(blank=True, default=list)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('guru_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.gurutype')),
            ],
        ),
        migrations.CreateModel(
            name='RawQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('category', models.TextField(default='')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('processed', models.BooleanField(default=False)),
                ('guru_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.gurutype')),
                ('raw_question_generation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.rawquestiongeneration')),
            ],
        ),
        migrations.CreateModel(
            name='OutOfContextQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('user_question', models.TextField()),
                ('rerank_threshold', models.FloatField(default=0.0)),
                ('trust_score_threshold', models.FloatField(default=0.0)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('processed_ctx_relevances', models.JSONField(blank=True, default=dict)),
                ('guru_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.gurutype')),
            ],
        ),
        migrations.CreateModel(
            name='LLMEvalResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.IntegerField()),
                ('model', models.TextField()),
                ('context_relevance_avg', models.FloatField()),
                ('context_relevance_median', models.FloatField()),
                ('context_relevance_std', models.FloatField()),
                ('groundedness_avg', models.FloatField()),
                ('groundedness_median', models.FloatField()),
                ('groundedness_std', models.FloatField()),
                ('answer_relevance_avg', models.FloatField()),
                ('answer_relevance_median', models.FloatField()),
                ('answer_relevance_std', models.FloatField()),
                ('total_questions', models.IntegerField()),
                ('total_cost', models.FloatField()),
                ('context_relevance_non_zero_avg', models.FloatField(blank=True, null=True)),
                ('context_relevance_non_zero_median', models.FloatField(blank=True, null=True)),
                ('context_relevance_non_zero_std', models.FloatField(blank=True, null=True)),
                ('context_relevance_non_zero_count', models.IntegerField(blank=True, null=True)),
                ('groundedness_non_zero_avg', models.FloatField(blank=True, null=True)),
                ('groundedness_non_zero_median', models.FloatField(blank=True, null=True)),
                ('groundedness_non_zero_std', models.FloatField(blank=True, null=True)),
                ('groundedness_non_zero_count', models.IntegerField(blank=True, null=True)),
                ('answer_relevance_non_zero_avg', models.FloatField(blank=True, null=True)),
                ('answer_relevance_non_zero_median', models.FloatField(blank=True, null=True)),
                ('answer_relevance_non_zero_std', models.FloatField(blank=True, null=True)),
                ('answer_relevance_non_zero_count', models.IntegerField(blank=True, null=True)),
                ('plot_url', models.URLField(blank=True, max_length=2000, null=True)),
                ('notes', models.TextField(blank=True, default='', null=True)),
                ('settings', models.JSONField(blank=True, default=dict, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('guru_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.gurutype')),
            ],
        ),
        migrations.CreateModel(
            name='LLMEval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model', models.TextField()),
                ('version', models.IntegerField(default=1)),
                ('context_relevance', models.FloatField(blank=True, default=0, null=True)),
                ('context_relevance_cot', models.TextField(blank=True, default='', null=True)),
                ('context_relevance_prompt', models.TextField(blank=True, default='', null=True)),
                ('context_relevance_user_prompt', models.TextField(blank=True, default='', null=True)),
                ('groundedness', models.FloatField(blank=True, default=0, null=True)),
                ('groundedness_cot', models.TextField(blank=True, default='', null=True)),
                ('groundedness_prompt', models.TextField(blank=True, default='', null=True)),
                ('answer_relevance', models.FloatField(blank=True, default=0, null=True)),
                ('answer_relevance_cot', models.TextField(blank=True, default='', null=True)),
                ('answer_relevance_prompt', models.TextField(blank=True, default='', null=True)),
                ('answer', models.TextField(blank=True, default='', null=True)),
                ('reranked_scores', models.JSONField(blank=True, default=list)),
                ('cost_dollars', models.FloatField(blank=True, default=0, null=True)),
                ('prompt_tokens', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('completion_tokens', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('cached_prompt_tokens', models.PositiveIntegerField(blank=True, default=0, null=True)),
                ('prompt', models.TextField(blank=True, default='', null=True)),
                ('contexts', models.JSONField(blank=True, default=list)),
                ('settings', models.JSONField(blank=True, default=dict)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('processed_ctx_relevances', models.JSONField(blank=True, default=dict)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='llm_evals', to='core.question')),
            ],
        ),
        migrations.CreateModel(
            name='LinkReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.TextField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.question')),
                ('validity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.linkvalidity')),
            ],
        ),
        migrations.CreateModel(
            name='FeaturedDataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('PDF', 'Pdf'), ('WEBSITE', 'Website'), ('YOUTUBE', 'Youtube')], default='PDF', max_length=50)),
                ('title', models.TextField()),
                ('description', models.TextField()),
                ('icon_url', models.URLField(max_length=2000)),
                ('active', models.BooleanField(default=True)),
                ('url', models.URLField(blank=True, max_length=2000, null=True)),
                ('guru_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.gurutype')),
            ],
        ),
        migrations.AddField(
            model_name='datasource',
            name='guru_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.gurutype'),
        ),
        migrations.CreateModel(
            name='ContentPageStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('upvotes', models.PositiveIntegerField(default=0)),
                ('downvotes', models.PositiveIntegerField(default=0)),
                ('question', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics', to='core.question')),
            ],
        ),
        migrations.AddField(
            model_name='binge',
            name='guru_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.gurutype'),
        ),
        migrations.AddField(
            model_name='binge',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='binge',
            name='root_question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='binge_root_question', to='core.question'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['add_to_sitemap'], name='core_questi_add_to__7f382b_idx'),
        ),
        migrations.AddIndex(
            model_name='question',
            index=models.Index(fields=['guru_type'], name='core_questi_guru_ty_90862d_idx'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('binge', 'slug', 'guru_type'), name='unique_binge_slug_guru'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(fields=('binge', 'question', 'guru_type'), name='unique_binge_question_guru'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(condition=models.Q(('binge__isnull', True)), fields=('slug', 'guru_type'), name='unique_null_binge_slug_guru'),
        ),
        migrations.AddConstraint(
            model_name='question',
            constraint=models.UniqueConstraint(condition=models.Q(('binge__isnull', True)), fields=('question', 'guru_type'), name='unique_null_binge_question_guru'),
        ),
        migrations.AlterUniqueTogether(
            name='llmevalresult',
            unique_together={('guru_type', 'version', 'model')},
        ),
        migrations.AlterUniqueTogether(
            name='datasource',
            unique_together={('type', 'url', 'guru_type')},
        ),
    ]
